/**
@var TRANSPORT
See @ref page_type_2
*/

/**
@page page_type_2 Transport


@section Description
            A transport is an object that helps the player move. It should not
            be confused an EXIT, which instantaneously transport a player from
            one map to another.
            <br>
            <br>
            Instead, a transport may let the player move faster, give him move
            types they don't have, etc. A simple example of this would a horse.
            It doesn't let the player move anyplace he normally couldn't go, but
            lets him get there faster. Ships would be another case - the player
            normally can't move across water, but with a ship, he can. 



Type defined by:
- @ref object::type = 2


@section Attributes

<table>
	<tr>
		<th>Attribute</th>
		<th>Field</th>
		<th>Description</th>
	</tr>
	<tr>
		<td>animation full</td>
		<td>@ref page_custom_attribute_anim_full "anim_full"</td>
		<td>            It may be desirable to have different animations to denote what the
            transport looks like if someone is on it vs. not (mounted horse vs.
            just a horse). This is used to denote what it will look like when
            loaded. If the transport becomes empty, it will fall back to the
            archetype animation.
		</td>
	</tr>
	<tr>
		<td>artifact</td>
		<td>@ref obj::artifact</td>
		<td>            If defined, refers to an artifact to get values from.
		</td>
	</tr>
	<tr>
		<td>base speed</td>
		<td>@ref page_custom_attribute_base_speed "base_speed"</td>
		<td>            This is only needed if &lt;weight speed ratio&gt; is set - it is
            used to know what the base speed to use in the calculation (since
            speed is getting clobbered). If this is not set and &lt;weight speed
            ratio&gt; is set, the archetype's speed will be used.
		</td>
	</tr>
	<tr>
		<td>block view</td>
		<td>@ref FLAG_BLOCKSVIEW</td>
		<td>            If an item is set to block view, players (and monsters) cannot see
            beyond it unless they cross it or manage to stand on top.
		</td>
	</tr>
	<tr>
		<td>changing</td>
		<td>@ref FLAG_CHANGING</td>
		<td>            A &lt;changing&gt; object converts to &lt;food&gt; &lt;other_arch&gt;
            objects; when it's animation is done. For non-living objects &lt;food&gt;
            is checked: if it is zero, the change happens; otherwise &lt;food&gt;
            is decreased by one. I suggest you don't mess with this value -
            leave the default in place.
		</td>
	</tr>
	<tr>
		<td>elevation</td>
		<td>@ref page_custom_attribute_elevation "elevation"</td>
		<td>            The elevation (height above sea level) of this square. It is used
            for weather calculations and should be in the range -32000..32000.
            The elevation of a tile must be set in the bottom-most game object;
            elevation values for non-bottom-most game objects are ignored by the
            Crossfire server.
		</td>
	</tr>
	<tr>
		<td>face full</td>
		<td>@ref page_custom_attribute_face_full "face_full"</td>
		<td>            It may be desirable to have different faces to denote what the
            transport looks like if someone is on it vs. not (mounted horse vs.
            just a horse). This is used to denote what it will look like when
            loaded. If the transport becomes empty, it will fall back to the
            archetype face.
		</td>
	</tr>
	<tr>
		<td>glow radius</td>
		<td>@ref obj::glow_radius</td>
		<td>            If &lt;glow radius&gt; is set to a value greater zero, the object
            appears lit up on dark maps. &lt;glow radius&gt; can be a value
            between 0 and 4, the higher, the more light does the object emit.
		</td>
	</tr>
	<tr>
		<td>identified</td>
		<td>@ref FLAG_IDENTIFIED</td>
		<td>            If an item is identified, the player has full knowledge about it.
		</td>
	</tr>
	<tr>
		<td>identified animation</td>
		<td>@ref page_custom_attribute_identified_animation "identified_animation"</td>
		<td>            If defined, then the object will take this animation when identified.
		</td>
	</tr>
	<tr>
		<td>identified animation speed</td>
		<td>@ref page_custom_attribute_identified_anim_speed "identified_anim_speed"</td>
		<td>            If defined, then the object will have this animation speed when identified.
		</td>
	</tr>
	<tr>
		<td>identified image</td>
		<td>@ref page_custom_attribute_identified_face "identified_face"</td>
		<td>            If defined, then the object will take this appareance when identified.
		</td>
	</tr>
	<tr>
		<td>identified random animation?</td>
		<td>@ref page_custom_attribute_identified_anim_random "identified_anim_random"</td>
		<td>            If defined, then the object's animation is in a random sequence when identified.
		</td>
	</tr>
	<tr>
		<td>identified_name</td>
		<td>@ref page_custom_attribute_identified_name "identified_name"</td>
		<td>            If defined, then the object will take this name when identified.
		</td>
	</tr>
	<tr>
		<td>identified_name_pl</td>
		<td>@ref page_custom_attribute_identified_name_pl "identified_name_pl"</td>
		<td>            If defined, then the object will take this plural name when identified.
		</td>
	</tr>
	<tr>
		<td>image</td>
		<td>@ref obj::face</td>
		<td>            The image-name defines what image is displayed for this object
            in-game.
		</td>
	</tr>
	<tr>
		<td>invisible</td>
		<td>@ref obj::invisible</td>
		<td>            Generally makes the object invisible. Depending on the object-type,
            some can be made visible by the show_invisible spell. If in doubt,
            test it. Putting an invisible object under the floor always prevents
            it from being shown.
		</td>
	</tr>
	<tr>
		<td>material</td>
		<td>@ref obj::material</td>
		<td>            This bitmask-value informs the player of which material(s) the
            object consists. Material does also affect how likely the object can
            be destroyed by hazardous spell-effects.
		</td>
	</tr>
	<tr>
		<td>move allow</td>
		<td>@ref obj::move_allow</td>
		<td>            The move type the transport grants, regardless of other objects on
            this square.
		</td>
	</tr>
	<tr>
		<td>move type</td>
		<td>@ref obj::move_type</td>
		<td>            The move type the transport uses.
		</td>
	</tr>
	<tr>
		<td>movement speed</td>
		<td>@ref obj::speed</td>
		<td>            How fast the transport moves.
		</td>
	</tr>
	<tr>
		<td>name</td>
		<td>@ref obj::name</td>
		<td>            This is the name of the object, displayed to the player.
		</td>
	</tr>
	<tr>
		<td>non-pickable</td>
		<td>@ref FLAG_NO_PICK</td>
		<td>            If set, the object cannot be picked up (Neither by players nor
            monsters).
		</td>
	</tr>
	<tr>
		<td>number</td>
		<td>@ref obj::nrof</td>
		<td>            This value determines the number of objects in one stack (for
            example: 100 gold coins =&gt; "number = 100"). You should set this
            at least to one, for any pickable object - otherwise it won't be
            mergeable into a stack.
		</td>
	</tr>
	<tr>
		<td>passenger limit</td>
		<td>@ref page_custom_attribute_passenger_limit "passenger_limit"</td>
		<td>            How many players this transport can hold. Thus, boats can transport
            a party (this being set to 6) while horses could only transport a
            single person. If this is not set, a default of 1 will be used.
		</td>
	</tr>
	<tr>
		<td>plural name</td>
		<td>@ref obj::name_pl</td>
		<td>            This is the plural name of the object. A plural name must be set for
            all items that can be picked up and collected by the player.
		</td>
	</tr>
	<tr>
		<td>price adjustment</td>
		<td>@ref page_custom_attribute_price_adjustment "price_adjustment"</td>
		<td>            If set, this is the buy and sell price adjustment ratio for the
            item.
		</td>
	</tr>
	<tr>
		<td>price adjustment for buying</td>
		<td>@ref page_custom_attribute_price_adjustment_buy "price_adjustment_buy"</td>
		<td>            If set, this is the adjustment ratio when buying the item. Ignored
            if &lt;price&gt; adjustment is set.
		</td>
	</tr>
	<tr>
		<td>price adjustment for selling</td>
		<td>@ref page_custom_attribute_price_adjustment_sell "price_adjustment_sell"</td>
		<td>            If set, this is the adjustment ratio when selling the item. Ignored
            if &lt;price&gt; adjustment is set.
		</td>
	</tr>
	<tr>
		<td>race restriction</td>
		<td>@ref page_custom_attribute_race_restriction "race_restriction"</td>
		<td>            If this is set to a : separated (with leading and trailing :) list
            of races, only players of this race will be able to apply the item.
		</td>
	</tr>
	<tr>
		<td>smooth level</td>
		<td>@ref obj::smoothlevel</td>
		<td>            If &lt;smooth level&gt; is set to a value greater zero, the object
            will be drawn partially over adjacent squares having a lower &lt;smooth
            level&gt; value. The value must be between 0 and 255 (inclusive); 0
            means &quot;never overlap adjacent squares&quot;.
		</td>
	</tr>
	<tr>
		<td>splitting</td>
		<td>@ref FLAG_SPLITTING</td>
		<td>            A &lt;splitting&gt; object converts to &lt;food&gt; &lt;other_arch&gt;
            objects; when it is hit physically. For non-living objects &lt;food&gt;
            is checked: if it is zero, the change happens; otherwise &lt;food&gt;
            is decreased by one. I suggest you don't mess with this value -
            leave the default in place.
		</td>
	</tr>
	<tr>
		<td>title</td>
		<td>@ref obj::title</td>
		<td>            This is the object's title. Once an object is identified the title
            is attached to the name. Typical titles are "of Mostrai", "of xray
            vision" etc.
		</td>
	</tr>
	<tr>
		<td>unpaid</td>
		<td>@ref FLAG_UNPAID</td>
		<td>            An &lt;unpaid&gt; item cannot be used unless a player carried it
            over a shop mat, paying the demanded price. Setting this flag makes
            sense only for pickable items inside shops.
		</td>
	</tr>
	<tr>
		<td>value</td>
		<td>@ref obj::value</td>
		<td>            Adds a certain value to the object: It will be worth that many times
            the default value from it's archetype (E.g. "value = 3" means three
            times worth the default value). Value for buying/selling will be
            further modified by various factors. Hence, testing values in-game
            is usually inevitable.
		</td>
	</tr>
	<tr>
		<td>weight</td>
		<td>@ref obj::weight</td>
		<td>            This value defines the object's weight in grams (1000g is 1kg).
            Objects with zero weight are not pickable for players. Still, set
            the "non-pickable"-flag for explicitly non-pickable objects (hey,
            this is open source.. you never know ;) ).
		</td>
	</tr>
	<tr>
		<td>weight limit</td>
		<td>@ref obj::container</td>
		<td>            How much this transport can carry.
		</td>
	</tr>
	<tr>
		<td>weight speed ratio</td>
		<td>@ref page_custom_attribute_weight_speed_ratio "weight_speed_ratio"</td>
		<td>            This value is taken as a percentage which is multiplied against
            against the weight this transport is carrying (the player) - this is
            then divided by weight_limit to determine the effective loading to
            determine effective object speed, eg:

            speed = &lt;base speed&gt; - (&lt;base speed&gt; * &lt;weight in
            transport&gt; * &lt;weight speed ratio&gt;) / (&lt;weight limit&gt;
            * 100)

            Thus, if &lt;weight factor&gt; is 0, this object will move the same
            speed no matter how loaded it is. If it is 100, then if the
            transport is fully loaded, it moves at a crawl. In a sense, this
            somewhat mimics the player movement speed. Large transports, like
            boats, should likely be largely unaffected by weight (maybe have
            this value at 10), where something like a horse would have a
            relatively high value.
		</td>
	</tr>
</table>
*/
