/**
@var EXIT
See @ref page_type_66
*/

/**
@page page_type_66 Exit


@section Description
            When the player applies an exit, he is transferred to a different
            location. (Monsters cannot use exits.) Depending on how it is set,
            the player applies the exit just by walking into it, or by pressing
            &lt;a&gt;pply when standing on the exit.  



Type defined by:
- @ref object::type = 66


@section Attributes

<table>
	<tr>
		<th>Attribute</th>
		<th>Field</th>
		<th>Description</th>
	</tr>
	<tr>
		<td>apply movement</td>
		<td>@ref obj::move_on</td>
		<td>            If set, the player will auto-apply the exit with these movement
            types. This must be set for the invisible exits for example. If
            unset, the player has to step onto the exit and press 'a' to get
            transferred.
		</td>
	</tr>
	<tr>
		<td>artifact</td>
		<td>@ref obj::artifact</td>
		<td>            If defined, refers to an artifact to get values from.
		</td>
	</tr>
	<tr>
		<td>block view</td>
		<td>@ref FLAG_BLOCKSVIEW</td>
		<td>            If an item is set to block view, players (and monsters) cannot see
            beyond it unless they cross it or manage to stand on top.
		</td>
	</tr>
	<tr>
		<td>blocked movement</td>
		<td>@ref obj::move_block</td>
		<td>            If set, the object cannot be passed by players nor monsters.
		</td>
	</tr>
	<tr>
		<td>changing</td>
		<td>@ref FLAG_CHANGING</td>
		<td>            A &lt;changing&gt; object converts to &lt;food&gt; &lt;other_arch&gt;
            objects; when it's animation is done. For non-living objects &lt;food&gt;
            is checked: if it is zero, the change happens; otherwise &lt;food&gt;
            is decreased by one. I suggest you don't mess with this value -
            leave the default in place.
		</td>
	</tr>
	<tr>
		<td>destination X</td>
		<td>@ref liv::hp</td>
		<td>            The exit destinations define the (x, y)-coordinates where the exit
            leads to. If both are set to zero, the player will be transferred to
            the "default enter location" of the destined map. The latter can be
            set in the map- properties as "Enter X/Y". Though, please DO NOT use
            that. It turned out to be a source for numerous map-bugs.
		</td>
	</tr>
	<tr>
		<td>destination Y</td>
		<td>@ref liv::sp</td>
		<td>            The exit destinations define the (x, y)-coordinates where the exit
            leads to. If both are set to zero, the player will be transferred to
            the "default enter location" of the destined map. The latter can be
            set in the map- properties as "Enter X/Y". Though, please DO NOT use
            that. It turned out to be a source for numerous map-bugs.
		</td>
	</tr>
	<tr>
		<td>elevation</td>
		<td>@ref page_custom_attribute_elevation "elevation"</td>
		<td>            The elevation (height above sea level) of this square. It is used
            for weather calculations and should be in the range -32000..32000.
            The elevation of a tile must be set in the bottom-most game object;
            elevation values for non-bottom-most game objects are ignored by the
            Crossfire server.
		</td>
	</tr>
	<tr>
		<td>exit message</td>
		<td>@ref obj::msg</td>
		<td>            If set, this message will be displayed to the player when he applies
            the exit. This is quite useful to throw in some "role-play feeling":
            "As you enter the dark cave you hear the sound of rustling dragon
            scales...". Well, my English is poor, but you get the point. =)
		</td>
	</tr>
	<tr>
		<td>exit path</td>
		<td>@ref obj::slaying</td>
		<td>            The exit path defines the map that the player is transferred to. You
            can enter an absolute path, beginning with '/' (for example
            "/peterm/FireTemple/fire1"). It can also be a relative path, not
            beginning with '/' (On the map "/peterm/FireTemple/Fire2" for
            example I could use the relative path "Fire1"). Use relative paths
            whenever possible! Note that upper/lower case must always be set
            correctly. However, please use lower case only. It is well possible
            to have an exit pointing to the same map that the exit is on. If
            slaying is not set in an exit, the player will see a message like
            "the exit is closed".
		</td>
	</tr>
	<tr>
		<td>glow radius</td>
		<td>@ref obj::glow_radius</td>
		<td>            If &lt;glow radius&gt; is set to a value greater zero, the object
            appears lit up on dark maps. &lt;glow radius&gt; can be a value
            between 0 and 4, the higher, the more light does the object emit.
		</td>
	</tr>
	<tr>
		<td>identified</td>
		<td>@ref FLAG_IDENTIFIED</td>
		<td>            If an item is identified, the player has full knowledge about it.
		</td>
	</tr>
	<tr>
		<td>identified animation</td>
		<td>@ref page_custom_attribute_identified_animation "identified_animation"</td>
		<td>            If defined, then the object will take this animation when identified.
		</td>
	</tr>
	<tr>
		<td>identified animation speed</td>
		<td>@ref page_custom_attribute_identified_anim_speed "identified_anim_speed"</td>
		<td>            If defined, then the object will have this animation speed when identified.
		</td>
	</tr>
	<tr>
		<td>identified image</td>
		<td>@ref page_custom_attribute_identified_face "identified_face"</td>
		<td>            If defined, then the object will take this appareance when identified.
		</td>
	</tr>
	<tr>
		<td>identified random animation?</td>
		<td>@ref page_custom_attribute_identified_anim_random "identified_anim_random"</td>
		<td>            If defined, then the object's animation is in a random sequence when identified.
		</td>
	</tr>
	<tr>
		<td>identified_name</td>
		<td>@ref page_custom_attribute_identified_name "identified_name"</td>
		<td>            If defined, then the object will take this name when identified.
		</td>
	</tr>
	<tr>
		<td>identified_name_pl</td>
		<td>@ref page_custom_attribute_identified_name_pl "identified_name_pl"</td>
		<td>            If defined, then the object will take this plural name when identified.
		</td>
	</tr>
	<tr>
		<td>image</td>
		<td>@ref obj::face</td>
		<td>            The image-name defines what image is displayed for this object
            in-game.
		</td>
	</tr>
	<tr>
		<td>invisible</td>
		<td>@ref obj::invisible</td>
		<td>            Generally makes the object invisible. Depending on the object-type,
            some can be made visible by the show_invisible spell. If in doubt,
            test it. Putting an invisible object under the floor always prevents
            it from being shown.
		</td>
	</tr>
	<tr>
		<td>material</td>
		<td>@ref obj::material</td>
		<td>            This bitmask-value informs the player of which material(s) the
            object consists. Material does also affect how likely the object can
            be destroyed by hazardous spell-effects.
		</td>
	</tr>
	<tr>
		<td>name</td>
		<td>@ref obj::name</td>
		<td>            This is the name of the object, displayed to the player.
		</td>
	</tr>
	<tr>
		<td>non-pickable</td>
		<td>@ref FLAG_NO_PICK</td>
		<td>            If set, the object cannot be picked up (Neither by players nor
            monsters).
		</td>
	</tr>
	<tr>
		<td>number</td>
		<td>@ref obj::nrof</td>
		<td>            This value determines the number of objects in one stack (for
            example: 100 gold coins =&gt; "number = 100"). You should set this
            at least to one, for any pickable object - otherwise it won't be
            mergeable into a stack.
		</td>
	</tr>
	<tr>
		<td>plural name</td>
		<td>@ref obj::name_pl</td>
		<td>            This is the plural name of the object. A plural name must be set for
            all items that can be picked up and collected by the player.
		</td>
	</tr>
	<tr>
		<td>price adjustment</td>
		<td>@ref page_custom_attribute_price_adjustment "price_adjustment"</td>
		<td>            If set, this is the buy and sell price adjustment ratio for the
            item.
		</td>
	</tr>
	<tr>
		<td>price adjustment for buying</td>
		<td>@ref page_custom_attribute_price_adjustment_buy "price_adjustment_buy"</td>
		<td>            If set, this is the adjustment ratio when buying the item. Ignored
            if &lt;price&gt; adjustment is set.
		</td>
	</tr>
	<tr>
		<td>price adjustment for selling</td>
		<td>@ref page_custom_attribute_price_adjustment_sell "price_adjustment_sell"</td>
		<td>            If set, this is the adjustment ratio when selling the item. Ignored
            if &lt;price&gt; adjustment is set.
		</td>
	</tr>
	<tr>
		<td>race restriction</td>
		<td>@ref page_custom_attribute_race_restriction "race_restriction"</td>
		<td>            If this is set to a : separated (with leading and trailing :) list
            of races, only players of this race will be able to apply the item.
		</td>
	</tr>
	<tr>
		<td>smooth level</td>
		<td>@ref obj::smoothlevel</td>
		<td>            If &lt;smooth level&gt; is set to a value greater zero, the object
            will be drawn partially over adjacent squares having a lower &lt;smooth
            level&gt; value. The value must be between 0 and 255 (inclusive); 0
            means &quot;never overlap adjacent squares&quot;.
		</td>
	</tr>
	<tr>
		<td>splitting</td>
		<td>@ref FLAG_SPLITTING</td>
		<td>            A &lt;splitting&gt; object converts to &lt;food&gt; &lt;other_arch&gt;
            objects; when it is hit physically. For non-living objects &lt;food&gt;
            is checked: if it is zero, the change happens; otherwise &lt;food&gt;
            is decreased by one. I suggest you don't mess with this value -
            leave the default in place.
		</td>
	</tr>
	<tr>
		<td>title</td>
		<td>@ref obj::title</td>
		<td>            This is the object's title. Once an object is identified the title
            is attached to the name. Typical titles are "of Mostrai", "of xray
            vision" etc.
		</td>
	</tr>
	<tr>
		<td>unique destination</td>
		<td>@ref FLAG_UNIQUE</td>
		<td>            This flag defines the destined map as "personal unique map". If set,
            there will be a separate version of that map for every player out
            there. This feature is used for the permanent apartments (in
            Scorn/Nuernberg/Caterham...). It should not be used for anything
            else than apartments, since Crossfire is a *multi*player game. In
            such a permanent apartment don't forget to set the unique-flag for
            all floor squares too (see floors). An exit pointing outside of a
            personal unique map must have the "unique destination"-flag unset.
		</td>
	</tr>
	<tr>
		<td>unpaid</td>
		<td>@ref FLAG_UNPAID</td>
		<td>            An &lt;unpaid&gt; item cannot be used unless a player carried it
            over a shop mat, paying the demanded price. Setting this flag makes
            sense only for pickable items inside shops.
		</td>
	</tr>
	<tr>
		<td>value</td>
		<td>@ref obj::value</td>
		<td>            Adds a certain value to the object: It will be worth that many times
            the default value from it's archetype (E.g. "value = 3" means three
            times worth the default value). Value for buying/selling will be
            further modified by various factors. Hence, testing values in-game
            is usually inevitable.
		</td>
	</tr>
	<tr>
		<td>weight</td>
		<td>@ref obj::weight</td>
		<td>            This value defines the object's weight in grams (1000g is 1kg).
            Objects with zero weight are not pickable for players. Still, set
            the "non-pickable"-flag for explicitly non-pickable objects (hey,
            this is open source.. you never know ;) ).
		</td>
	</tr>
</table>
*/
